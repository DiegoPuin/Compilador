
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 19 07:54:50 COT 2020
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 19 07:54:50 COT 2020
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner.
     * @param s */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner.
     * @param s
     * @param sf */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\011\000\002\004" +
    "\011\000\002\006\011\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\013\007\000\002\007\015\000\002\010\011\000\002" +
    "\011\013\000\002\012\011\000\002\014\012\000\002\014" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\015\031\000\002\016\007\000\002\016\011\000" +
    "\002\017\010\000\002\017\010" });

  /** Access to production table.
     * @return  */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\004\006\057\004\001\002\000\004\051" +
    "\251\001\002\000\004\002\250\001\002\000\004\057\007" +
    "\001\002\000\004\051\010\001\002\000\004\052\011\001" +
    "\002\000\004\053\012\001\002\000\024\010\015\011\026" +
    "\015\030\017\033\020\034\021\014\022\032\026\023\050" +
    "\025\001\002\000\026\010\uffee\011\uffee\015\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\024\uffee\026\uffee\054\uffee\001" +
    "\002\000\004\051\215\001\002\000\006\046\201\062\200" +
    "\001\002\000\026\010\ufff7\011\ufff7\015\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\024\ufff7\026\ufff7\054\ufff7\001\002" +
    "\000\024\010\015\011\026\015\030\017\033\020\034\021" +
    "\014\022\032\026\023\054\177\001\002\000\026\010\ufffd" +
    "\011\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024" +
    "\ufffd\026\ufffd\054\ufffd\001\002\000\026\010\ufff1\011\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\026" +
    "\ufff1\054\ufff1\001\002\000\026\010\ufffb\011\ufffb\015\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb\026\ufffb\054" +
    "\ufffb\001\002\000\004\051\166\001\002\000\026\010\ufff9" +
    "\011\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024" +
    "\ufff9\026\ufff9\054\ufff9\001\002\000\004\014\155\001\002" +
    "\000\004\062\136\001\002\000\026\010\ufff5\011\ufff5\015" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5\026\ufff5" +
    "\054\ufff5\001\002\000\004\051\124\001\002\000\026\010" +
    "\uffef\011\uffef\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\024\uffef\026\uffef\054\uffef\001\002\000\004\051\076\001" +
    "\002\000\004\053\066\001\002\000\004\051\036\001\002" +
    "\000\026\010\ufff3\011\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\024\ufff3\026\ufff3\054\ufff3\001\002\000\006" +
    "\047\040\062\041\001\002\000\004\052\052\001\002\000" +
    "\006\052\uffe3\060\uffe3\001\002\000\004\044\042\001\002" +
    "\000\012\006\044\047\045\062\046\063\043\001\002\000" +
    "\006\052\uffe1\060\uffe1\001\002\000\006\006\047\062\050" +
    "\001\002\000\006\052\uffe2\060\uffe2\001\002\000\006\052" +
    "\uffe0\060\uffe0\001\002\000\006\052\uffdf\060\uffdf\001\002" +
    "\000\004\006\051\001\002\000\006\052\uffde\060\uffde\001" +
    "\002\000\004\053\053\001\002\000\024\010\015\011\026" +
    "\015\030\017\033\020\034\021\014\022\032\026\023\050" +
    "\025\001\002\000\024\010\015\011\026\015\030\017\033" +
    "\020\034\021\014\022\032\026\023\054\062\001\002\000" +
    "\026\010\ufff8\011\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\026\ufff8\054\ufff8\001\002\000\026\010" +
    "\ufff4\011\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\024\ufff4\026\ufff4\054\ufff4\001\002\000\026\010\ufffe\011" +
    "\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\024\ufffe" +
    "\026\ufffe\054\ufffe\001\002\000\026\010\ufffa\011\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\026\ufffa" +
    "\054\ufffa\001\002\000\026\010\ufffc\011\ufffc\015\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc\026\ufffc\054\ufffc" +
    "\001\002\000\026\010\uffdc\011\uffdc\015\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\054\uffdc\001\002" +
    "\000\026\010\ufff0\011\ufff0\015\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\026\ufff0\054\ufff0\001\002\000\026" +
    "\010\ufff2\011\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\024\ufff2\026\ufff2\054\ufff2\001\002\000\026\010\ufff6" +
    "\011\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024" +
    "\ufff6\026\ufff6\054\ufff6\001\002\000\024\010\015\011\026" +
    "\015\030\017\033\020\034\021\014\022\032\026\023\050" +
    "\025\001\002\000\024\010\015\011\026\015\030\017\033" +
    "\020\034\021\014\022\032\026\023\054\070\001\002\000" +
    "\004\020\071\001\002\000\004\051\072\001\002\000\006" +
    "\047\040\062\041\001\002\000\004\052\074\001\002\000" +
    "\004\060\075\001\002\000\026\010\uffdb\011\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\026\uffdb\054" +
    "\uffdb\001\002\000\004\062\077\001\002\000\004\052\100" +
    "\001\002\000\004\053\101\001\002\000\004\023\102\001" +
    "\002\000\004\062\103\001\002\000\004\061\104\001\002" +
    "\000\024\010\015\011\026\015\030\017\033\020\034\021" +
    "\014\022\032\026\023\050\025\001\002\000\024\010\015" +
    "\011\026\015\030\017\033\020\034\021\014\022\032\024" +
    "\106\026\023\001\002\000\004\060\107\001\002\000\004" +
    "\023\110\001\002\000\004\062\111\001\002\000\004\061" +
    "\112\001\002\000\024\010\015\011\026\015\030\017\033" +
    "\020\034\021\014\022\032\026\023\050\025\001\002\000" +
    "\024\010\015\011\026\015\030\017\033\020\034\021\014" +
    "\022\032\024\114\026\023\001\002\000\004\060\115\001" +
    "\002\000\004\025\116\001\002\000\004\061\117\001\002" +
    "\000\024\010\015\011\026\015\030\017\033\020\034\021" +
    "\014\022\032\026\023\050\025\001\002\000\024\010\015" +
    "\011\026\015\030\017\033\020\034\021\014\022\032\024" +
    "\121\026\023\001\002\000\004\060\122\001\002\000\004" +
    "\054\123\001\002\000\026\010\uffd4\011\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\026\uffd4\054\uffd4" +
    "\001\002\000\006\047\040\062\041\001\002\000\004\052" +
    "\126\001\002\000\004\053\127\001\002\000\024\010\015" +
    "\011\026\015\030\017\033\020\034\021\014\022\032\026" +
    "\023\050\025\001\002\000\024\010\015\011\026\015\030" +
    "\017\033\020\034\021\014\022\032\026\023\054\131\001" +
    "\002\000\030\010\uffe4\011\uffe4\015\uffe4\016\132\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\024\uffe4\026\uffe4\054\uffe4\001" +
    "\002\000\004\053\133\001\002\000\024\010\015\011\026" +
    "\015\030\017\033\020\034\021\014\022\032\026\023\050" +
    "\025\001\002\000\024\010\015\011\026\015\030\017\033" +
    "\020\034\021\014\022\032\026\023\054\135\001\002\000" +
    "\026\010\uffdd\011\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\024\uffdd\026\uffdd\054\uffdd\001\002\000\006\035" +
    "\140\045\137\001\002\000\004\006\147\001\002\000\004" +
    "\006\141\001\002\000\006\006\142\062\143\001\002\000" +
    "\004\060\146\001\002\000\004\006\144\001\002\000\004" +
    "\060\145\001\002\000\026\010\uffe5\011\uffe5\015\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\054\uffe5" +
    "\001\002\000\026\010\uffe7\011\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\024\uffe7\026\uffe7\054\uffe7\001\002" +
    "\000\006\006\150\062\151\001\002\000\004\060\154\001" +
    "\002\000\004\006\152\001\002\000\004\060\153\001\002" +
    "\000\026\010\uffe6\011\uffe6\015\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\024\uffe6\026\uffe6\054\uffe6\001\002\000\026" +
    "\010\uffe8\011\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\024\uffe8\026\uffe8\054\uffe8\001\002\000\006\006\156" +
    "\044\157\001\002\000\004\062\163\001\002\000\004\062" +
    "\160\001\002\000\004\044\161\001\002\000\004\060\162" +
    "\001\002\000\026\010\uffd1\011\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\024\uffd1\026\uffd1\054\uffd1\001\002" +
    "\000\004\006\164\001\002\000\004\060\165\001\002\000" +
    "\026\010\uffd0\011\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\024\uffd0\026\uffd0\054\uffd0\001\002\000\006\006" +
    "\167\062\170\001\002\000\004\062\173\001\002\000\004" +
    "\052\171\001\002\000\004\060\172\001\002\000\026\010" +
    "\uffd3\011\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\024\uffd3\026\uffd3\054\uffd3\001\002\000\004\052\174\001" +
    "\002\000\004\006\175\001\002\000\004\060\176\001\002" +
    "\000\026\010\uffd2\011\uffd2\015\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\024\uffd2\026\uffd2\054\uffd2\001\002\000\004" +
    "\002\000\001\002\000\012\035\207\045\204\046\206\060" +
    "\205\001\002\000\004\062\202\001\002\000\004\060\203" +
    "\001\002\000\026\010\uffe9\011\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\024\uffe9\026\uffe9\054\uffe9\001\002" +
    "\000\004\063\213\001\002\000\026\010\uffed\011\uffed\015" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed\026\uffed" +
    "\054\uffed\001\002\000\004\060\212\001\002\000\004\063" +
    "\210\001\002\000\004\060\211\001\002\000\026\010\uffeb" +
    "\011\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024" +
    "\uffeb\026\uffeb\054\uffeb\001\002\000\026\010\uffea\011\uffea" +
    "\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\026" +
    "\uffea\054\uffea\001\002\000\004\060\214\001\002\000\026" +
    "\010\uffec\011\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\024\uffec\026\uffec\054\uffec\001\002\000\006\010\217" +
    "\062\220\001\002\000\004\052\244\001\002\000\004\062" +
    "\235\001\002\000\004\035\221\001\002\000\004\063\222" +
    "\001\002\000\004\060\223\001\002\000\006\047\040\062" +
    "\041\001\002\000\004\060\225\001\002\000\006\046\227" +
    "\062\230\001\002\000\004\052\uffd8\001\002\000\004\062" +
    "\234\001\002\000\006\045\231\046\232\001\002\000\004" +
    "\063\233\001\002\000\004\052\uffd6\001\002\000\004\052" +
    "\uffd7\001\002\000\004\052\uffd5\001\002\000\004\035\236" +
    "\001\002\000\004\063\237\001\002\000\004\060\240\001" +
    "\002\000\006\047\040\062\041\001\002\000\004\060\242" +
    "\001\002\000\006\046\227\062\230\001\002\000\004\052" +
    "\uffd9\001\002\000\004\053\245\001\002\000\024\010\015" +
    "\011\026\015\030\017\033\020\034\021\014\022\032\026" +
    "\023\050\025\001\002\000\024\010\015\011\026\015\030" +
    "\017\033\020\034\021\014\022\032\026\023\054\247\001" +
    "\002\000\026\010\uffda\011\uffda\015\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\024\uffda\026\uffda\054\uffda\001\002\000" +
    "\004\002\001\001\002\000\004\052\252\001\002\000\004" +
    "\053\253\001\002\000\024\010\015\011\026\015\030\017" +
    "\033\020\034\021\014\022\032\026\023\050\025\001\002" +
    "\000\024\010\015\011\026\015\030\017\033\020\034\021" +
    "\014\022\032\026\023\054\255\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table.
     * @return  */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\016\004\017\006" +
    "\021\007\023\010\015\011\026\012\034\015\020\016\030" +
    "\017\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\056\006\060" +
    "\007\057\010\054\011\064\012\055\015\063\016\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\053\004\017" +
    "\006\021\007\023\010\015\011\026\012\034\015\020\016" +
    "\030\017\012\001\001\000\022\004\056\006\060\007\057" +
    "\010\054\011\064\012\055\015\063\016\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\066" +
    "\004\017\006\021\007\023\010\015\011\026\012\034\015" +
    "\020\016\030\017\012\001\001\000\022\004\056\006\060" +
    "\007\057\010\054\011\064\012\055\015\063\016\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\104\004\017\006\021\007\023\010\015\011\026" +
    "\012\034\015\020\016\030\017\012\001\001\000\022\004" +
    "\056\006\060\007\057\010\054\011\064\012\055\015\063" +
    "\016\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\112\004\017" +
    "\006\021\007\023\010\015\011\026\012\034\015\020\016" +
    "\030\017\012\001\001\000\022\004\056\006\060\007\057" +
    "\010\054\011\064\012\055\015\063\016\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\117\004\017\006\021\007\023\010\015\011\026\012" +
    "\034\015\020\016\030\017\012\001\001\000\022\004\056" +
    "\006\060\007\057\010\054\011\064\012\055\015\063\016" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\127\004\017\006\021\007\023" +
    "\010\015\011\026\012\034\015\020\016\030\017\012\001" +
    "\001\000\022\004\056\006\060\007\057\010\054\011\064" +
    "\012\055\015\063\016\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\133\004\017\006\021\007\023" +
    "\010\015\011\026\012\034\015\020\016\030\017\012\001" +
    "\001\000\022\004\056\006\060\007\057\010\054\011\064" +
    "\012\055\015\063\016\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\223\001\001\000\002" +
    "\001\001\000\004\005\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\240" +
    "\001\001\000\002\001\001\000\004\005\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\245\004\017" +
    "\006\021\007\023\010\015\011\026\012\034\015\020\016" +
    "\030\017\012\001\001\000\022\004\056\006\060\007\057" +
    "\010\054\011\064\012\055\015\063\016\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\253\004\017\006\021\007\023\010" +
    "\015\011\026\012\034\015\020\016\030\017\012\001\001" +
    "\000\022\004\056\006\060\007\057\010\054\011\064\012" +
    "\055\015\063\016\062\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table.
     * @return  */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action.
     * @param act_num
     * @param parser
     * @param stack
     * @param top
     * @return
     * @throws java.lang.Exception  */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state.
     * @return  */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production.
     * @return  */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index.
     * @return  */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index.
     * @return  */
  @Override
  public int error_sym() {return 1;}



    private Symbol s;
    
  @Override
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INCLUDE ::= Numeral Include Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INCLUDE ::= Numeral Include Op_relacional Identificador Op_relacional P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRINT ::= Print Parentesis_a Comillas Identificador Parentesis_c Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRINT ::= Print Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Identificador Dos_P SENTENCIA Break P_coma Case Identificador Dos_P SENTENCIA Break P_coma Default Dos_P SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-22)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= T_datoN Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_datoN Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_datoN Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_datoN Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_datoN Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= T_datoN Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

